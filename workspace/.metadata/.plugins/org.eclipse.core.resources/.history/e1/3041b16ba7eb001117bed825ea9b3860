package com.adamcox.rapbeats;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import android.app.Activity;
import android.media.AudioManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;
import android.graphics.Bitmap;

/*
 *
 * Make URL post the actual file to the server...
 * Then, redirect the user to a webpage where they can access that file...and share it...
 * Server only has to output an id for the location of the file on the web...
 * 
 */

public class GenerateWav extends Activity {
	private Services services = new Services();

    private TextView tv;

    String rapUrl = "";
    
	private TextView mText;
    private String Title;

	private String path; //Path to where files are saved...
    private String FileName;

    ImageView playButton;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        Bundle extras = getIntent().getExtras();

        setVolumeControlStream(AudioManager.STREAM_MUSIC);
        
        if(extras !=null) {
        	Title = extras.getString("Title");
        	FileName = extras.getString("FileName");

            //Toast.makeText(MP3Downloader.this, FileName, Toast.LENGTH_LONG).show();

            File t_file = new File( FileName );
            
        	if( t_file.exists() ) {
        		path = t_file.getParent() +  File.separator;
        		FileName = t_file.getName();

        		services.execute(FileName);
                
        	} else {
        		//Error...
	        }
        	
        } else {
        	Log.d( "MP3Downloader", "Could not get Extras" );
        }

    }

    @Override
    protected void onResume() {
    	super.onResume();
    	
    }

    @Override
    protected void onPause() {
        super.onPause();
    }
    
    @Override
    public void onStop()
    {
    	super.onStop();
    }
    
    @Override
    public void onDestroy()
    {
    	super.onDestroy();
    }
    
    protected void setUpTitle()
    {
        tv = (TextView) findViewById(R.id.song_title);
        tv.setText(Title);
    }

    protected void setUpButtons()
    {
        playButton = (ImageView) findViewById(R.id.play);
        
        playButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                Toast.makeText(GenerateWav.this, "Play", Toast.LENGTH_SHORT).show();
            }
        });
    }


    /**
     * This class handles the downloading of the song and display's the progress bar with KB downloaded so far...
     * @author Adam
     *
     */
    public class Services extends AsyncTask<String, Integer, Bitmap> {
    	String fileName;

    	@Override
        protected void onPostExecute(Bitmap bm) {
            setContentView(R.layout.media);
            setUpTitle();
            setUpButtons();
        }

    	@Override
        protected void onProgressUpdate(Integer... progress) {
    		//Log.d("Download Progress", progress[0] + " KB downloaded" );
    		mText.setText(progress[0] + "KB of " + progress[1] + "KB downloaded");
        }
    	
    	@Override
    	protected Bitmap doInBackground(String... _fileName) {
        
    		fileName = _fileName[0];

        	try {

        		URL u = new URL( "http://www.8d8apps.com/test.php");
        		HttpURLConnection c = (HttpURLConnection) u.openConnection();
        		c.setRequestMethod("POST");
        		c.addRequestProperty("testName", "testValue");
        	    c.setDoOutput(false);
        	    c.connect();
        	    
        	    int ContentLength = c.getContentLength();

        	    FileOutputStream f = new FileOutputStream(new File( path, fileName ) );

                /*
                 * Define InputStreams to read from the URLConnection.
                 */
                InputStream in = c.getInputStream();

                /*
                 * Let's make a LogCat entry:
                 */
                Log.d("MP3Downloader", "downloading: " + path + fileName);

                /*
                 * Read bytes to the Buffer until there is nothing more to read(-1).
                 */

                byte[] buffer = new byte[1024];
                

                int len1 = 0;

            	while ( ( len1 = in.read(buffer) ) > 0) {

                    Log.d("MP3Downloader", "downloading: " + len1 + " " + String.valueOf(buffer) );

                }

                f.close();

        	} catch (IOException e) {
                    Log.d("MP3Downloader", "Error 1: " + e);
            }

    		// TODO Auto-generated method stub
    		return null;
    	}	

    }

}
